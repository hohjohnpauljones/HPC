/*
    OCLTools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Dr. Zaius
    ClusterChimps.org
*/

#ifndef __oclutil_h__
#define __oclutil_h__

#ifdef __cplusplus
    extern "C" {
#endif


#include <CL/cl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define checkErrorEX(a, b, c) __shrCheckErrorEX(a, b, c, __FILE__ , __LINE__)
#define checkError(a, b) checkErrorEX(a, b, 0)

#ifndef EXIT_FAILURE
#define EXIT_FAILURE 1
#endif

inline void __shrCheckErrorEX(int iSample, int iReference, void (*pCleanup)(int), const char* cFile, const int iLine)
{
   if (iReference != iSample)
   {
      printf("Error# %d in ocl call at line %d, in file %s!\n", iSample, iLine, cFile);
      if (pCleanup != NULL)
      {
         pCleanup(EXIT_FAILURE);
      }
      else
      {
         exit(EXIT_FAILURE);
      }
   }
}

/*
   This function finds the cl_platform_id that matches the name passed in.  It
   assumes that you only care about a single platform.  If it can not find
   a cl_platform_id that matches the one requested it will print out a warning
   and return the zeroth cl_platform_id.
*/
cl_int          ocltGetPlatformID(cl_platform_id* clSelectedPlatformID, const char* name);

/*
   This function reads in the source for an OpenCL kernel from the file system. If it can
   not open and read the file it will return 0 otherwise it returns a char* containing
   the source and sets the value of the length argument to the length of the string.
*/
char*           ocltLoadKernelSrc(const char* filename, size_t* length);

/*
   This function reads in an OpenCL kernel binary from the file system.  This binary must
   be created with oclcc because oclcc will embed the compiler flags used at compilation
   time into the binary file it creates.  This function extracts the compiler flags (if any)
   and sets the compilerFlags argument with them.  It also sets the length argument to the
   length of the kernel binary.  It returns a char* containing the kernel binary.
*/
unsigned char*  ocltLoadKernelBin(const char* filename, char** compilerFlags, size_t* length);

/*
   This function extracts embeded kernels from the object file generated by oclelf that was
   linked into the application.  If there is a problem with kernel extraction it prints out
   an error and exits.  If it is successful it build an internal DB containing all kernels
   extracted.  The DB is indexed by the output file name (minus suffix) supplied to oclelf.
*/
void            ocltExtractKernels();

/*
   This function queries the internel kernel DB based on the kernelName passed in and returns
   the binary. It also sets the compilerFlag argument to match what was passed to oclcc at
   compile time.  The length argument is set to the length of the binary that is returned.  If
   the kernel can not be found this function prints an error and returns NULL. Note: You MUST
   call ocltExtractKernels() before calling this function.
*/
unsigned char*  ocltGetEmbeddedKernelBin(char* kernelName, char** compilerFlags, size_t* length);

/*
   This function queries the internel kernel DB based on the kernelName passed in and returns
   the source. The length argument is set to the length of the source that is returned.  If the
   source can not be found this function prints an error and returns NULL. Note: You MUST call
   ocltExtractKernels() before calling this function.
*/
unsigned char*  ocltGetEmbeddedKernelSrc(char* kernelName, size_t* length);

/*
   This function decrypts kernels encrypted by oclcrypt.  You must pass in the 8 character key
   that you used in your makefile to encrypt the kernel, the encrypted kernel (source | binary)
   that you got from either ocltLoadKernelSrc(), ocltLoadKernelBin(), ocltGetEmbeddedKernelSrc(),
   or ocltGetEmbeddedKernelBin().  This function returns the decrypted kernel.
*/
char*           ocltDecrypt(char *key, char *kernel, int length);

#ifdef __cplusplus
 }
#endif

#endif

